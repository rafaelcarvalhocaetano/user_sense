package channel

import (
	"botwhatsapp/internal/app/whatsapp"
	"botwhatsapp/internal/app/whatsapp/usecases/dojo"
	"botwhatsapp/internal/app/whatsapp/usecases/dojo/dto"
	"fmt"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"
)

type ChannelFlowXodo struct {
	wtsgate  whatsapp.Gateway
	dojogate dojo.Gateway
}

func NewChannelFlowXodo(gate whatsapp.Gateway, dojo dojo.Gateway) *ChannelFlowXodo {
	return &ChannelFlowXodo{wtsgate: gate, dojogate: dojo}
}

var aval = "https://github.com/rafaelcarvalhocaetano/meetup/blob/master/avaliacao.png?raw=true"
var membro = "https://github.com/rafaelcarvalhocaetano/meetup/blob/master/membro.png?raw=true"
var sac = "https://github.com/rafaelcarvalhocaetano/meetup/blob/master/sac.png?raw=true"
var xodo = "https://media.licdn.com/dms/image/D4D0BAQEe8aamu2cmTg/company-logo_200_200/0/1711134503656/xodoapp_logo?e=2147483647&v=beta&t=wWm6gg64bolgEo6jFctyn2gdt9jzjiPFVHotyS0fzTk"

func (disp *ChannelFlowXodo) ChannelFlowXodo(userData <-chan *UserData) {
	var wg sync.WaitGroup
	mapcadastro := make(map[string]bool)
	mapdata := make(map[string]any)
	indexCadastro := 0
	go func() {
		defer wg.Done()
		for cc := range userData {
			wg.Add(1)

			fmt.Println("\n\n\n\n dddd: ", cc.Payload)
			switch strings.ToUpper(cc.Payload) {
			case "AVALIAR":
				p := map[string]any{
					"button_1_id":    "1",
					"button_1_title": "1",
					"button_2_id":    "2",
					"button_2_title": "2",
					"button_3_id":    "3",
					"button_3_title": "3",
				}
				disp.sendInteractiveMessage(cc.UserPhone, "dojo-avaliar", aval, "-", "-", p)
			case "MEMBRO":
				p := map[string]interface{}{
					"param_header_1": membro,
					"param_next_1":   "rafaelcarvalhocaetano",
				}
				disp.sendTemplateMessage(cc.UserPhone, "sac_information", p)
				time.AfterFunc(1*time.Minute, func() {
					disp.sendContact(cc.UserPhone, "5511963450246", "Rosemeire")
				})
			case "SAC":
				disp.sendContact(cc.UserPhone, "5511963450246", "Rosemeire")
			default:
				if mapcadastro[cc.UserPhone] {
					if indexCadastro == 2 {
						info := ""
						for key, v := range mapdata {
							info += fmt.Sprintf("%v: %v\n", strings.ToUpper(key), v)
						}
						p := map[string]any{
							"button_1_id":    "sim",
							"button_1_title": "Sim",
							"button_2_id":    "nao",
							"button_2_title": "Não",
						}
						ola := fmt.Sprintf("Seus dados estão corretos?\n\n%v\n", info)
						disp.sendInteractiveMessage(cc.UserPhone, "dojo-membro", xodo, "https://xodoapp.com", ola, p)
					}
					if indexCadastro == 0 && cc.Payload != "nao" {
						mapdata["nome"] = cc.Payload
						disp.sendSimpleMessage(cc.UserPhone, "Endereço: ")
					}
					if indexCadastro == 1 {
						mapdata["endereco"] = cc.Payload
						disp.sendSimpleMessage(cc.UserPhone, "CPF: ")
					}
					mapdata["cpf"] = cc.Payload
					indexCadastro++

					if strings.ToUpper(cc.Payload) == "NAO" && indexCadastro >= 2 {
						indexCadastro = 0
						disp.sendSimpleMessage(cc.UserPhone, "Vamos novamente, informe seu nome completo:")
					}
					if strings.ToUpper(cc.Payload) == "SIM" && indexCadastro >= 2 {
						disp.sendSimpleMessage(cc.UserPhone, "Aqui está seu QRCODE")
					}
				} else {
					p := map[string]any{
						"button_1_id":    "avaliar",
						"button_1_title": "Avaliar abastecimeto",
						"button_2_id":    "membro",
						"button_2_title": "Torne-se membro",
						"button_3_id":    "SAC",
						"button_3_title": "SAC",
					}
					ola := fmt.Sprintf("Ola, %v", cc.UserName)
					disp.sendInteractiveMessage(cc.UserPhone, "dojo-avaliar", xodo, "http://xodoapp.com", ola, p)
				}
			}
		}
	}()

	go func() { wg.Wait() }()
}

func (disp *ChannelFlowXodo) sendInteractiveMessage(phone, iname, header, fo, bo string, params map[string]any) {
	interactiveParams := dto.InteractiveDispatchParams{
		Name:   &iname,
		To:     &phone,
		Header: &header,
		Body:   &bo,
		Footer: &fo,
		Params: params,
	}
	_, err := disp.dojogate.DispatchInteractive(&interactiveParams)
	if err != nil {
		fmt.Println(err)
	}
}

func (disp *ChannelFlowXodo) workers() int {
	numWorkersStr := os.Getenv("NUMBER_WORKERS")
	numWorkers, err := strconv.Atoi(numWorkersStr)
	if err != nil || numWorkers <= 0 {
		numWorkers = 1
	}
	return numWorkers
}

func (disp *ChannelFlowXodo) sendSimpleMessage(to, msg string) {
	t := "text"
	simpleMessage := dojo.InputSendSimpleMessage{Message: msg, To: to, Type: &t}
	_, _ = disp.dojogate.SendSimpleMessage(&simpleMessage)
}

func (disp *ChannelFlowXodo) sendContact(to, cnumber, cname string) {
	t := "contact"
	simpleMessage := dojo.InputSendSimpleMessage{
		To:            to,
		Type:          &t,
		ContactNumber: &cnumber,
		ContactName:   &cname,
	}
	_, _ = disp.dojogate.SendSimpleMessage(&simpleMessage)
}

func (disp *ChannelFlowXodo) sendTemplateMessage(to, template string, params map[string]any) {
	payload := dto.DojoDispatchParams{
		Name:   &template,
		To:     &to,
		Params: &params,
	}
	_, _ = disp.dojogate.Dispatch(&payload)
}
